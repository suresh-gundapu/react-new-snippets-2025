Orey macha, ✅ **useForm custom hook** ni login/signup/profile forms lo ela use cheyyalo 
**Telugu + English mix** lo chala clear ga cheptha. Interviews lo kuda idi neat example.

---

## 💡 **Goal: Create a reusable custom hook to handle form inputs and validation**

---

### 📦 Step 1: Create `useForm.js`

```js
import { useState } from "react";

const useForm = (initialValues) => {
  const [values, setValues] = useState(initialValues);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setValues((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const resetForm = () => setValues(initialValues);

  return { values, handleChange, resetForm };
};

export default useForm;
```

---

### 🔍 Explanation (Telugu + English)

| Part            | Meaning                                                         |
| --------------- | --------------------------------------------------------------- |
| `initialValues` | Starting values for form fields (Ex: `{ name: '', email: '' }`) |
| `useState`      | State lo all form fields untayi                                 |
| `handleChange`  | Input field lo change ayite value update avutadi                |
| `resetForm`     | Form reset cheyyali ante idi call cheyyachu                     |

---

### 🧪 Step 2: Use it in Login / Signup Form Component

```jsx
import React from "react";
import useForm from "./useForm";

const LoginForm = () => {
  const { values, handleChange, resetForm } = useForm({
    email: "",
    password: "",
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log("Form Submitted", values);
    // API call / validation cheyyachu
    resetForm(); // form clear
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        name="email"
        placeholder="Enter email"
        value={values.email}
        onChange={handleChange}
      />

      <input
        type="password"
        name="password"
        placeholder="Enter password"
        value={values.password}
        onChange={handleChange}
      />

      <button type="submit">Login</button>
    </form>
  );
};

export default LoginForm;
```

---

### 🎯 Real-time Use Cases

| Component         | Fields handled by `useForm`            |
| ----------------- | -------------------------------------- |
| LoginForm         | email, password                        |
| SignupForm        | name, email, password, confirmPassword |
| ProfileUpdateForm | name, phone, address, etc.             |

---

## 🤩 Interview Lo Ela Cheppali?

> "Custom `useForm` hook create chesam to handle multiple form inputs dynamically. Instead of individual useState for each field, one central hook lo
 manage chesam. Reusable for login, signup, and even profile forms. It returned `values`, `handleChange`, and `resetForm`, so components became very 
 clean and less repetitive."

---


