Superb question ra macha! üî• **Custom Hooks** is a favorite React interview topic ‚Äì and explaining it with a **real-time example** will make you stand out.

---

## üîÅ What is a Custom Hook? (Simple Telugu + English)

**Custom Hook** ante manam own logic ni `use` prefix tho oka reusable function la create cheyyadam.

> It‚Äôs just a **JavaScript function that uses built-in hooks like useState, useEffect** etc., and returns useful logic.

---

## üíº Real-Time Use Case: `useFetch` Custom Hook

Let‚Äôs say every component lo API call chesthunnaavu like:

```js
useEffect(() => {
  fetch("https://api.example.com/users")
    .then((res) => res.json())
    .then((data) => setUsers(data));
}, []);
```

üí• Same code again and again repeat avutundi.

---

### ‚úÖ Solution: Create Custom Hook `useFetch.js`

```jsx
import { useState, useEffect } from "react";

const useFetch = (url) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch(url)
      .then((res) => res.json())
      .then((result) => {
        setData(result);
        setLoading(false);
      });
  }, [url]);

  return { data, loading };
};

export default useFetch;
```

---

### ‚úÖ Use in any component:

```jsx
import useFetch from './useFetch';

const UserList = () => {
  const { data, loading } = useFetch("https://api.example.com/users");

  if (loading) return <p>Loading...</p>;

  return (
    <ul>
      {data.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
};
```

---

### üìå Real-Time Advantages:

| Benefit             | Explanation                                                   |
| ------------------- | ------------------------------------------------------------- |
| ‚úÖ Code Reuse        | useFetch can be reused in any screen (users, posts, comments) |
| ‚úÖ Clean Components  | Component code becomes clean and readable                     |
| ‚úÖ Centralized Logic | Easy to update API logic in one place                         |
| ‚úÖ Testable          | Custom hooks can be tested separately                         |

---

## üß† Interview Lo Simple Answer:

> ‚ÄúCustom hook is just a reusable function that contains hook logic. In my project, I created a `useFetch` hook to simplify API calls. Instead of writing `useEffect + fetch` in every component, I just called `useFetch(url)` and got `data` & `loading`. It made my components cleaner and reduced code duplication.‚Äù

---

## üîß Common Real-Time Custom Hooks:

| Hook Name       | Use Case                         |
| --------------- | -------------------------------- |
| `useForm`       | Form input & validation handling  -- simple form and small projects  ki use chestam  |
| `useAuth`       | Login, logout, isAuthenticated   |
| `useDebounce`   | Delay search input               |
| `useWindowSize` | Get live screen width/height     |
| `useOnline`     | Track online/offline status      |

---

Want cheyyava?

‚úÖ PDF version
‚úÖ Working StackBlitz
‚úÖ Custom hook exercise (MCQ + code)

Cheppu ra macha, next step cheptha.
